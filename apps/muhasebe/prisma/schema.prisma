// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema
// https://www.prisma.io/docs/orm/reference/prisma-schema-reference#model-field-scalar-types

// npx prisma db push
// npx prisma studio

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

generator client {
  provider = "prisma-client-js"
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model User {
  id                 String        @id @default(cuid())
  name               String?
  email              String?       @unique
  emailVerified      DateTime?
  // uuid code for email verification
  emailVerifiedCode  String?       @unique @default(uuid())
  changePasswordCode String?       @unique
  phone              String?       @db.VarChar(20)
  hashedPassword     String?
  image              String?
  sessions           Session[]
  CompanyUser        CompanyUser[]
  Company            Company[]
  createdAt          DateTime      @default(now())
  updatedAt          DateTime      @updatedAt
}

model Company {
  // autoincrement id start from 100000
  id          Int           @id @default(autoincrement())
  companyType String        @db.VarChar(255)
  title       String        @db.VarChar(255)
  vknTckn     String        @db.VarChar(11)
  taxOffice   String        @db.VarChar(150)
  adress      String        @db.VarChar(255)
  email       String
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  CompanyUser CompanyUser[]
  createdById String        @db.VarChar(255)
  createdBy   User          @relation(fields: [createdById], references: [id])

  @@index([createdById])
}

// create new table for permissions and roles user has in the company // companyId and userId are foreign keys
model CompanyUser {
  id               String    @id @default(cuid())
  companyId        Int
  userId           String
  role             String    @db.VarChar(255)
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt
  invitedAt        DateTime?
  invitedBy        String?   @db.VarChar(255)
  isActive         Boolean   @default(false)
  acceptedInviteAt DateTime?
  inviteId         String?   @unique
  company          Company   @relation(fields: [companyId], references: [id])
  user             User      @relation(fields: [userId], references: [id])

  @@unique([companyId, userId])
  @@index([companyId])
  @@index([userId])
}
